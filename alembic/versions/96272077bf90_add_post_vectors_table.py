"""Add post_vectors table

Revision ID: 96272077bf90
Revises: 1d64d470653c
Create Date: 2025-10-24 01:04:19.967786

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import pgvector.sqlalchemy

# revision identifiers, used by Alembic.
revision: str = '96272077bf90'
down_revision: Union[str, Sequence[str], None] = '1d64d470653c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('post_vectors',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('post_id', sa.String(), nullable=False),
    sa.Column('vector', pgvector.sqlalchemy.Vector(dim=384), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_post_vectors_post_id'), 'post_vectors', ['post_id'], unique=True)
    op.create_index('ix_post_vectors_vector', 'post_vectors', ['vector'], unique=False, postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'vector': 'vector_cosine_ops'})
    op.drop_table('test_cases')
    op.alter_column('problems', 'difficulty',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('problems', 'dataset_type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_constraint(op.f('unique_source_dataset'), 'problems', type_='unique')
    op.create_index(op.f('ix_problems_id'), 'problems', ['id'], unique=False)
    op.drop_constraint(op.f('social_accounts_provider_user_id_key'), 'social_accounts', type_='unique')
    op.create_unique_constraint('uq_social_accounts_provider_user_id', 'social_accounts', ['provider_user_id'], postgresql_nulls_not_distinct=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('uq_social_accounts_provider_user_id', 'social_accounts', type_='unique')
    op.create_unique_constraint(op.f('social_accounts_provider_user_id_key'), 'social_accounts', ['provider_user_id'], postgresql_nulls_not_distinct=False)
    op.drop_index(op.f('ix_problems_id'), table_name='problems')
    op.create_unique_constraint(op.f('unique_source_dataset'), 'problems', ['problem_id', 'dataset_type'], postgresql_nulls_not_distinct=False)
    op.alter_column('problems', 'dataset_type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('problems', 'difficulty',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.create_table('test_cases',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('problem_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('input_data', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('output_data', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('test_cases_pkey'))
    )
    op.drop_index('ix_post_vectors_vector', table_name='post_vectors', postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'vector': 'vector_cosine_ops'})
    op.drop_index(op.f('ix_post_vectors_post_id'), table_name='post_vectors')
    op.drop_table('post_vectors')
    # ### end Alembic commands ###
